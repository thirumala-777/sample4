result_vector <- numeric_vector + 1
logical_result <- logiacal_vector & c(TRUE, TRUE, FALSE, FALSE)
logical_result <- logical_vector & c(TRUE, TRUE, FALSE, FALSE)
single_quotes <- 'this is a character string'
double_quotes <- "This is another character string"
concatenated_string <- paste("hello", "world!")
x <- 10
intepolated_string <- paste("The value of x is", x)
interpolated_string <- sprintf("The value of x is %d", x)
uppercase_string <- toupper("hello")
lowercase_string <- tolower("WORLD")
substring <- substr("abcdef", start=2, stop=4)
replaced_string <- gsub("old", "new", "old string")
numeric_vector[1]
total<-sum(numeric_vector)
sorted_vector<-sort(numeric_vector)
reversed_vector<-rev(integer)
reversed
_vector<-rev(integer_vector)
upper_string<-toupper("hello")
complex_vector<-c(1+2i,3+4i,5+6i)
>integer<-character_vector[2]
x<-10
interpolated_string<-paste("the value of x is",%d",x")
total<-sum(numeric_vector)
length_of_vector<-length(character_vector)-3l
sorted_vector<-sort(numeric_vector)
result_vector<-number_vector+1
integer_vector(1+2i,3+4i;5+6i)-cplx(1:3)
first_element<-numericc_vector[1]-1.5
b<-5
is_not-equal<-a!=b
is_greater_than_or_equal<-a>=b--true
character_vector<-c("apple","bannana",)chr[1:2]
logical_vector<-c(true,false,true,true)-logi[1:4]
concatenated_vector<-c(character_vector,"grape")
logical_result<-vector&c
logical_result<-logical_vector&c(true,true,false,false)
interpolated_string<-sprintf("the value of x is %d"x)
the logical_result<_logical_vector&c(true,true,false,false)
double=split()
interpolated_string<-paste("the value of x is",x)
interpolated_string<-sprintf?"the value of x is%d",x)
mat1<-matrix(1:6,nrow=2)
integer_vector<-c(true,false,true,true)
zero_loat<-matrix(0,nrow=2,ncol=3)
vec l-1:6
first-element<-character(12,34)
second_element<-character_vector[2]
result_vector<-numeric_vector+c
logi:[1:4]
thislist<-list("apple","banana","cherry")
thislist[1]<-"blackcurrant"
my_list<-list(1,"a",TRUE)
my_list[1]
my_list<-c(my_list,"new_element")
my_list<-my_list[-2]
length(my_list)
for(element in my_list){}
for(element in my_list){
print(element)
}
combined_list<-c(list1,list2)
combined_list<-c(list1,list2)
"element"%in%my_list
lappy(my_list,function(x)x*2)
filtered_list<-my_list[my_list > 5]
this_list[1]
thislist<-list("apple","banana","cherry")
this_list[1]
thislist[1]
thislist[1]<-"blackcurrant"
View(thislist)
View(thislist)
View(thislist)
thislist<-list("apple","banana","cherry")
View(mtcars)
thislist<-list("apple","banana","cherry")
View(thislist)
View(thislist)
View(thislist)
my_list<-list(1,"a",TRUE)
View(my_list)
View(my_list)
my_list[1]
my_list<-c(my_list,"new_element")
View(my_list)
my_list<-my_list[-2]
View(mtcars)
View(mtcars)
View(my_list)
length(my_list)
install.packages("readxl")
data<-read_excellent("path_to-your_excellent_file.xlsx")
data<-read_excel("path_to-your_excellent_file.xlsx")
head(data())
head(data)
data<-read_excel("path_to-your_excellent_file.xlsx")
library(writexl)
df<-data.frame(
name=c("alice","bob","charlie"),
age=c(25,30,35)
score=c(80,85,90)
df<-data.frame(
name=c("alice","bob","charlie"),
age=c(25,30,35),
score=c(80,85,90)
)
View(df)
x<-c(21,262,10,53)
labels<-c("london","newyork","singapore","mumbai")
png(file="city.png")
pie(x,labels)
length(my_list)
length(my_list)
> data<-read_excel("path_to-your_excel_file.xlsx")
head(data)
data<-read_excel("path_to-your_excel_file.xlsx")
head(data)
x<-c(21,262,10,53) labels<-c("london","newyork","singapore","mumbai")
> png(file="city.png")
> pie(x,labels)
x<-c(21,262,10,53) labels<-c("london","newyork","singapore","mumbai")
> png(file="city.png")
> pie(x,labels)
x<-c(21,262,10,53)
labels<-c("london","newyork","singapore","mumbai")
png(file="city.png")
pie(x,labels)
dev.off()
h<-c(7,12,28,3,41)
png(file="barchart.png")
barplot(h)
barplot(h)
dev.off()
h<-c(7,12,28,3,41)
m<-c("mar","apr","may","june","jul")
png(file="barchart_month_revenue.png")
barplot(h,names=m,xlab = "months",ylab = "revenue",col=blue,main = "revenue chart",border = "red")
barplot(h,names=m,xlab = "months",ylab = "revenue",col="blue",main = "revenue chart",border = "red")
barplot(h,names=m,xlab = "months",ylab = "revenue",col="blue",main = "revenue chart",border = "red")
dev.off()
input<-mtcars[,c('wt','mpg')]
View(input)
var=as.integer(var);
print(var)
var=readline();
print(var)
var=readline(prompt="enter any number:");
var=as.integer(var);
print(var)
var1=readline("enter 1 number:");
var2=readline("enter 1 number:");
var3=readline("enter 1 number:");
var4=readline("enter 1 number:");
print(var1+var2+var3+var4)
my_list$new_element<-c(4,5,6)
character s=("a","b","c")
logics=c(true,false,true0)
mat1<-matrix(1:6,nrow=2)
mat2<-matrix(7:12,nrow=2)
result_addition<-mat1+mat2
result_multiplication<-mat1%t(mat2)
transposed_mat<-t(mat)
dimenstions<-dim(mat)
row_names<-rownmaes(mat)
my_df$genderz-("female","male","male","male")
subset.data.frame()
subset.default()
my_df<-my_df_$name
ages<-my_df({"name"})
my_df<-data.frame(id=c(1234)...,
name=c("alice")
name=c("alice")
name=c("alice")
name=c("alice")
name=c("alice")
log(x)
exp(x)
exp(x)
exp(x)
exp(x)
exp(x)
exp(x)log()
exp(x)log()
the log (x)
exp(x)log()
exp(x)log()
exp(x)log()
linearizeMlist()
kksub result_addition
sort resullt
revsort.result)
revsort.result<-sort(v,decreaseing=true)
logical-vect<-(true,false,true,false)
,gggggg
vector index(logical 1234)
not _result<-logical-vect1logiCal-vec2
my_vector<-c(10,20,30,40,50)
third_element<-my_vector[3]
prin(third element)
v1<-c(3,8,4,5,0,11)
v2<-c(4,11,0,8,1,2)
add.result<-v1+v2)
print(add.result)
sub.result<v1-v2
print(sub.result)
multi result<-v1*v2
print(multi.result)
divi.reult<v1/ve
divisible<v1\v2
print(div.result)
print("abc")
print(12.5)
print(63l)
print(TRUE)
print(2+3i)
print(char to row )("hellow")
print(seq[5,9,by=0.4))
the result(67,78)
result(45.12)
(45.56)
(53.56)
(67.89)
(45.67)
(23.er)
(56.46)
(56.45)
(23.45)
(56.49)
(67.78)
tyy=65
tyy=78
tyy=65
tyy=45
(23.45)
(23.45)
(23.45)
(23.45)
(23.45)
(23.45)
(23.45)
(23.45)
(23.45)
(23.45)
(23.45)
(23.45)
tyy=45
tyy=45
tyy=45
my_list<-list(1,2,3,4,5)
for(i in seq_along (my_list))
{}
current_element l_my_list[i])
print(paste("the current element is:",curent element))
}
prod_numbers<-function(num1,num2)
{
result<-num1*num2
return(result)
}
num1<-15
num2<-5
result<-prod_numbers(num1,num2)
print(result)
check_odd_even<-function(number){
if(number%%2==0){
print(paste(number,"is even"))
}
else{
print(paste(number,"is odd"))
}
}
check_odd_even(5)
check_odd_even(12)
sum_of_natural_numbers<-function(n){
if(n<1){
print("input must be a positive integer")
}
else {
sum<-0
for(i in 1:n){
sum<-sum+i
}
print(paste("the sum of natural numbers up to",n,"is",sum))
}
}
sum_of_natural_numbers(5)
sum_of_natural_numbers(10)
a<-4
factorial<-1
for(i in 1:a)
{
factorial<-factorial*i;
}
print(paste("the factorial of the numbers",factorial))
BMI<-data.frame(
gender=c("male","male","female");
height=c("152","17.5","165");
BMI<-data.frame(
height=c("152","17.5","165"),
BMI<-data.frame(
height=c("152","17.5","165"),
height=c("152","17.5","165"):
BMI<-data.frame(
gender=c("male","male","female"),
height=c("152","17.5","165"),
weight=c("81","93","78"),
age=c("42","38","26"),
stringAsFactors=FALSE
)
print(BMI)
StringAsFactors=FALSE
)
BMI<-data.frame(
gender=c("male","male","female"),
height=c("152","17.5","165"),
weight=c("81","93","78"),
age=c("42","38","26"),
StringAsFactors=FALSE
)
print(BMI)
set.seed(123)
data_vector<-rnorm(100)
data_frame<-data.frame(matrix(rnorm(100),ncol=5))
mean_value<-mean(data_vector)
median_value<-median(data_vector)
sd_value<-sd(data_vector)
print(paste("mean:",mean_value))
print(paste("median:",median_value))
print(paste("standard deviation:",sd_value))
set.seed(123)
data_vector<-rnorm(100)
data_frame<-data.frame(matrix(rnorm(100),ncol=5))
variance_value<-var(data_vector)
correlation_matrix<-cor(data_frame,use="complete.obs")
print(paste("variance:",variance_value))
print("correlation matrix:")
print(correlation matrix)
print(correlation_matrix)
set.seed(0)
sweetsold<-c(rnorm(50,mean=140,sd=5))
t.test(sweetsold,m4=150)
library(MASS)
print(str(survey))
stu_data=data.frame(survey$smoke,survey$Exer)
data(mtcars)
head(mtcars)
model<-lm(mpg~wt,data=mtcars)
summary(model)
h<-c(7,12,28,3,41)
png(file="barchart.png")
barplot(h)
dev.off()
m<-c("mar","apr","may","jun","jul")
png(file="barchart_months_revenue.png")
barplot(h,names.arg=m,xlab="month",ylab="revenue",col="blue",main="revenue chart",border="red")
dev.off()
input<-mtcars[,c('wt','mpg')]
png(file="scatterplot.png")
plot(x=input$wt,y=input$mpg,
xlab="weight",
ylab="milage",
xlim=c(2.5,5),
ylim=c(15,30),
main="weight vs milage"
)
dev.off()
png(file="boxplot_with_notch.png")
boxplot(mpg~cyl,data=mtcars,
xlab="number of cylinders",
ylab="miles per gallon",
main="mileage data"
main="mileage data",
png(file="boxplot_with_notch.png")
boxplot(mpg~cyl,data=mtcars,
xlab="number of cylinders",
ylab="miles per gallon",
main="mileage data",
notch=TRUE
xlab="number of cylinders",D
png(file="boxplot_with_notch.png")
boxplot(mpg~cyl,data=mtcars,
xlab="number of cylinders",
ylab="miles per gallon",
main="mileage data",
notch=TRUE,
varwidth=TRUE,
col=c("green","yellow","purple"),
names=c("high","medium","low")
)
library(MASS)
print(str(survey))
stu_data=data.frame(survey$Smoke,survey$Exer)
stu_data=table(survey$smoke,survey$Exer)
print(stu_data)
print(chisq.test(stu_data))
library(MASS)
print(str(survey))
stu_data=data.frame(survey$smoke,survey$exer)
stu_data=table(survey$smoke,survey$exer)
print(stu_data)
library(MASS)
print(Str(Survey))
print(str(Survey))
print(str(survey))
stu_data=data.frame(survey$Smoke,survey$Exer)
stu_data=table(survey$Smoke,survey$Exer)
print(stu_data)
print(chisq.test(stu_data))
data(mtcars)
head(mtcars)
mode<-lm(mpg~wt,data=mtcars)
Summary(model)
model<-lm(mpg~wt,data=mtcars)
Summary(model)
data(mtcars)
head(mtcars)
model<-lm(mpg~wt,data=mtcars)
Summary(model)
plot(mtcars$wt,mtcars$mpg,main=)
plot(mtcars$wt,mtcars$mpg,main=)
model<-lm(mpg~wt,data=mtcars)
model<-lm(mpg~wt,data=mtcars)
Summary(model)
data(mtcars)
head(mtcars)
model<-lm(mpg~wt,data=mtcars)
Summary(model)
plot(mtcars$wt,mtcars$mpg,main="Linear Regression Example",xlab="weight(1000lbs"), ylab="miles per Gallon")
abline(model,col="red")
data(mtcars)
head(mtcars)
model<-Lm(mpg~wt,data=mtcars)
model<-lm(mpg~wt,data=mtcars)
summary(model)
plot(mtcars$wt,mtcars$mpg,main="Linear Regression Example",xlab="weight(1000lbs"), ylab="miles per Gallon")
plot(mtcars$wt,mtcars$mpg,main="Linear Regression Example",xlab="weight(1000lbs") ylab="miles per Gallon")
data(mtcars)
head(mtcars)
model<-lm(mpg~wt,data=mtcars)
summary(model)
plot(mtcars$wt,mtcars$mpg,main="Linear Regression Example",
xlab="weight(1000lbs)", ylab="miles per Gallon")
abline(model,col="red")
abline(model, col="red")
data(mtcars)
head(mtcars)
model<-lm(mpg~wt,data=mtcars)
summary(model)
plot(mtcars$wt,mtcars$mpg,main="Linear Regression Example",
xlab="weight(1000lbs)", ylab="miles per Gallon")
abline(model, col="red")
View(model)
View(model)
View(mode)
View(model)
data(mtcars)
mtcars$mpg_high~wt,data=mtcars,family
data(mtcars)
mtcars$mpg_high<-if else(mtcars$mpg>median(mtcars$mpg),1,0)
mtcars$mpg_high<-ifelse(mtcars$mpg>median(mtcars$mpg),1,0)
model<-gim(mpg)
model<-gim(mpg_high~wt, data=mtcars,family=binomial)
model<-glm(mpg_high~wt, data=mtcars,family=binomial)
model<-glm (mpg_high~wt, data=mtcars,family=binomial)
data(mtcars)
mtcars$mpg_high<-ifelse(mtcars$mpg>median(mtcars$mpg),1,0)
model<-glm (mpg_high~wt, data=mtcars,family=binomial)
model <-glm(mpg_high~wt, data=mtcars,family=binomial)
summary(model)
plot(mtcars$wt,mtcars$mpg,main="Linear Regression Example",
xlab="weight(1000lbs)", ylab="high milage(1)/
low milage(0)", cols=ifelse(mtcars$mpg_high)==1,"blue","red"))
low milage(0)", cols=ifelse(mtcars$mpg_high)==1,"blue","red")
curve(predict(model, data.frame(wt=x), type=
"response"), add=TRUE, col="green", lwd=2)
data(mtcars)
head(mtcars)
model <-lm(mpg~wt,data=mtcars)
Summary(model)
summary(model)
plot(mtcars$wt, mtcars$mpg, main="Linear Regression Example",
xlab="weight(1000lbs)", ylab="miles per Gallon")
abline(model, col="red")
data(mtcars)
head(mtcars)
model <-lm(mpg~wt,data=mtcars)
summary(model)
plot(mtcars$wt, mtcars$mpg, main="Linear Regression Example")
xlab="weight(1000lbs)"
ylab="miles per Gallon"
abline(model, col="red")
data(mtcars)
head(mtcars)
model <-lm(mpg~wt,data=mtcars)
summary(model)
plot(mtcars$wt, mtcars$mpg, main="Linear Regression Example",
xlab="weight (1000lbs)", ylab="Miles Per Gallon")
abline(model, col="red")
}
else{
}
data(mtcars)
head(mtcars)
sum_of_natural_numbers <-function(n)
if(n<1)
{
print("Input can be taken as positive Integer")
}
else{
else
